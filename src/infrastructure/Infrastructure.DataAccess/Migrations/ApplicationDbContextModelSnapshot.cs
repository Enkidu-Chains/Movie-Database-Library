// <auto-generated />
using System;
using Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GoogleDriverFileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("googleDriverFileId");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movieId");

                    b.HasKey("Id")
                        .HasName("pK_images");

                    b.HasIndex("GoogleDriverFileId")
                        .IsUnique()
                        .HasDatabaseName("iX_images_googleDriverFileId");

                    b.HasIndex("MovieId")
                        .IsUnique()
                        .HasDatabaseName("iX_images_movieId");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("author");

                    b.Property<DateOnly?>("DateAired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateOnly(2022, 12, 29))
                        .HasColumnName("dateAired");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval")
                        .HasColumnName("duration");

                    b.Property<int?>("PosterId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("posterId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Studio")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("studio");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_movies");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.MovieList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("ownerId");

                    b.HasKey("Id")
                        .HasName("pK_movieLists");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("iX_movieLists_ownerId");

                    b.ToTable("movieLists", (string)null);
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.MovieToMovieList", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movieId");

                    b.Property<int>("MovieListId")
                        .HasColumnType("integer")
                        .HasColumnName("movieListId");

                    b.HasKey("MovieId", "MovieListId")
                        .HasName("pK_movieToMovieList");

                    b.HasIndex("MovieListId")
                        .HasDatabaseName("iX_movieToMovieList_movieListId");

                    b.ToTable("movieToMovieList", (string)null);
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("pK_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("iX_users_email");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("iX_users_login");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Image", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.Movie", "Movie")
                        .WithOne("Poster")
                        .HasForeignKey("Infrastructure.DataAccess.Models.Image", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_images_movies_movieId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.MovieList", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.User", "Owner")
                        .WithMany("MovieLists")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_movieLists_users_ownerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.MovieToMovieList", b =>
                {
                    b.HasOne("Infrastructure.DataAccess.Models.Movie", "Movie")
                        .WithMany("MovieToMovieList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_movieToMovieList_movies_movieId");

                    b.HasOne("Infrastructure.DataAccess.Models.MovieList", "MovieList")
                        .WithMany("MovieToMovieList")
                        .HasForeignKey("MovieListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_movieToMovieList_movieLists_movieListId");

                    b.Navigation("Movie");

                    b.Navigation("MovieList");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.Movie", b =>
                {
                    b.Navigation("MovieToMovieList");

                    b.Navigation("Poster")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.MovieList", b =>
                {
                    b.Navigation("MovieToMovieList");
                });

            modelBuilder.Entity("Infrastructure.DataAccess.Models.User", b =>
                {
                    b.Navigation("MovieLists");
                });
#pragma warning restore 612, 618
        }
    }
}
